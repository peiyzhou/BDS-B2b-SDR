function B2bcode = generateB2bCode(PRN,settings)
% This function generates one of the BDS-3 satellite B2b codes.
%
% B2bcode = generateB2bCode(PRN,settings)
%
%   Inputs:
%       PRN         - PRN number of the sequence.
%       settings    - receiver settings
%
%   Outputs:
%       B2bcode      - a vector containing the desired B2b data code
%                   (chips).

%--------------------------------------------------------------------------
%                         BDS-B2b SDR  
% Updated by Peiyuan Zhou based on Li et al. (2019) Design and 
% implementation of an open‑source BDS‑3 B1C/B2a SDR receiver. GPS
% Solutions, 23:60.
%--------------------------------------------------------------------------
%This program is free software; you can redistribute it and/or
%modify it under the terms of the GNU General Public License
%as published by the Free Software Foundation; either version 2
%of the License, or (at your option) any later version.
%
%This program is distributed in the hope that it will be useful,
%but WITHOUT ANY WARRANTY; without even the implied warranty of
%MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License
%along with this program; if not, write to the Free Software
%Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
%USA.
%--------------------------------------------------------------------------

% --- Initail parameters for data code generation ------------------------
% Initial values of the register No.2
B2b_reg2_ini = [1 0 0 0 0 0 0 1 0 0 1 0 1;...
                1 0 0 0 0 0 0 1 1 0 1 0 0;...
                1 0 0 0 0 1 0 1 0 1 1 0 1;...
                1 0 0 0 1 0 1 0 0 1 1 1 1;...
                1 0 0 0 1 0 1 0 1 0 1 0 1;... % 5
                1 0 0 0 1 1 0 1 0 1 1 1 0;...
                1 0 0 0 1 1 1 1 0 1 1 1 0;...
                1 0 0 0 1 1 1 1 1 1 0 1 1;...
                1 0 0 1 1 0 0 1 0 1 0 0 1;...
                1 0 0 1 1 1 1 0 1 1 0 1 0;... % 10
                1 0 1 0 0 0 0 1 1 0 1 0 1;...
                1 0 1 0 0 0 1 0 0 0 1 0 0;...
                1 0 1 0 0 0 1 0 1 0 1 0 1;...
                1 0 1 0 0 0 1 0 1 1 0 1 1;...
                1 0 1 0 0 0 1 0 1 1 1 0 0;... % 15
                1 0 1 0 0 1 0 1 0 0 0 1 1;...
                1 0 1 0 0 1 1 1 1 0 1 1 1;...
                1 0 1 0 1 0 0 0 0 0 0 0 1;...
                1 0 1 0 1 0 0 1 1 1 1 1 0;...
                1 0 1 0 1 1 0 1 0 1 0 1 1;... % 20
                1 0 1 0 1 1 0 1 1 0 0 0 1;...
                1 0 1 1 0 0 1 0 1 0 0 1 1;...
                1 0 1 1 0 0 1 1 0 0 0 1 0;...
                1 0 1 1 0 1 0 0 1 1 0 0 0;...
                1 0 1 1 0 1 0 1 1 0 1 1 0;... % 25
                1 0 1 1 0 1 1 1 1 0 0 1 0;...
                1 0 1 1 0 1 1 1 1 1 1 1 1;...
                1 0 1 1 1 0 0 0 1 0 0 1 0;...
                1 0 1 1 1 0 0 1 1 1 1 0 0;...
                1 0 1 1 1 1 0 1 0 0 0 0 1;... % 30
                1 0 1 1 1 1 1 0 0 1 0 0 0;...
                1 0 1 1 1 1 1 0 1 0 1 0 0;...
                1 0 1 1 1 1 1 1 0 1 0 1 1;...
                1 0 1 1 1 1 1 1 1 0 0 1 1;...
                1 1 0 0 0 0 1 0 1 0 0 0 1;... % 35
                1 1 0 0 0 1 0 0 1 0 1 0 0;...
                1 1 0 0 0 1 0 1 1 0 1 1 1;...
                1 1 0 0 1 0 0 0 1 0 0 0 1;...
                1 1 0 0 1 0 0 0 1 1 0 0 1;...
                1 1 0 0 1 1 0 1 0 1 0 1 1;... % 40
                1 1 0 0 1 1 0 1 1 0 0 0 1;...
                1 1 0 0 1 1 1 0 1 0 0 1 0;...
                1 1 0 1 0 0 1 0 1 0 1 0 1;...
                1 1 0 1 0 0 1 1 1 0 1 0 0;...
                1 1 0 1 0 1 1 0 0 1 0 1 1;... % 45
                1 1 0 1 1 0 1 0 1 0 1 1 1;...
                1 1 1 0 0 0 0 1 1 0 1 0 0;...
                1 1 1 0 0 1 0 0 0 0 0 1 1;...
                1 1 1 0 0 1 0 0 0 1 0 1 1;...
                1 1 1 0 0 1 0 1 0 0 0 1 1;... % 50
                1 1 1 0 0 1 0 1 0 1 0 0 0;...
                1 1 1 0 1 0 0 1 1 1 0 1 1;...
                1 1 1 0 1 1 0 0 1 0 1 1 1;...
                1 1 1 1 0 0 1 0 0 1 0 0 0;...
                1 1 1 1 0 1 0 0 1 0 1 0 0;... % 55 
                1 1 1 1 0 1 0 0 1 1 0 0 1;...
                1 1 1 1 0 1 1 0 1 1 0 1 0;...
                1 1 1 1 0 1 1 1 1 1 0 0 0;...
                1 1 1 1 0 1 1 1 1 1 1 1 1;... % 59
                1 1 1 1 1 1 0 1 1 0 1 0 1;... % 60 
                1 1 1 1 1 1 0 1 1 1 1 0 1;...
                0 1 0 1 1 1 0 0 0 0 1 0 1;...
                0 1 0 1 1 0 0 1 1 1 0 1 1];

% Code length
CodeLength = settings.codeLength;

%--- Generate XA codes ----------------------------------------------------
% Feedback position of exclusive OR operation for XA codes
reg1_FeedbackPos = [1 9 10 13];
reg2_FeedbackPos = [3 4 6 9 12 13];

% Initial state of XA register: 1 for 0, and -1 for 1, to perform exclusive
% OR operation by multiply
register1 = ones(1,13) * -1;
register2  = 1- 2* B2b_reg2_ini(PRN,:);

% XA codes output
B2bcode = zeros(1,CodeLength);

% XA register will be reset to all 1 (here -1 represents 1)
reset_index = 8190;

%--- Generate the B2b data channel codes ----------------------------------
for ind = 1:CodeLength
    B2bcode(ind) = register1(end) * register2(end);
    % Exclusive OR operation for feedback
    feedback1 = prod(register1(reg1_FeedbackPos));
    % shift the register to right by one element
    register1 = circshift(register1',1)';
    register1(1) = feedback1;
    % Exclusive OR operation for feedback
    feedback2 = prod(register2(reg2_FeedbackPos));
    % shift the register to right by one element
    register2 = circshift(register2',1)';
    register2(1) = feedback2;
    if ind == reset_index
        register1 = ones(1,13) * -1;
    end
end
